1.1 :-
every program contain one or more functions. one of them is main, the operating system runs a c++ program by calling main.
//the following program return value to operation system.
int main(){
    return 0;
}
a function defination have four element : return type, function name, a( possibily empty) parameter list enclosed in paranthesis and
a function body.
a) return type: Type of the value returned by a function.
b)function name:  Name by which a function is known and can be called.
c)parameter list : Part of the definition of a function. Possibly empty list that
specifies what arguments can be used to call the function.
e)function body Block that defines the actions performed by a function.
built-in type:  Type, such as int, defined by the language.
curly-braces : Curly braces delimit blocks. An open curly ({) starts a block; a close
curly (}) ends one.
The only statement in this block is a return, which is a statement that terminates a
function. As is the case here, a return can also send a value back to the function’s
caller. When a return statement includes a value, the value returned must have a
type that is compatible with the return type of the function. In this case, the return
type of main is int and the return value is 0, which is an int.
On most systems, the value returned from main is a status indicator. A return value
of 0 indicates success. A nonzero return has a meaning that is defined by the system.
Ordinarily a nonzero return indicates what kind of error occurred.
A type
defines both the contents of a data element and the operations that are
possible on those data.
The data our programs manipulate are stored in variables and every
variable has a type. When the type of a variable named v is T, we often say
that “v has type T” or, interchangeably, that “v is a T.”

source file:  Term used to describe a file that contains a C++ program.


#how compiler works :-

step1 :$cc prog1.cc
where CC names the compiler and $ is the system prompt. The compiler generates an
executable file. On a Windows system, that executable file is named prog1.exe.
UNIX compilers tend to put their executables in files named a.out.
To run an executable on Windows, we supply the executable file name and can omit
the .exe file extension: $ prog1

step2 : On some systems you must specify the file’s location explicitly, even if the file is in the
current directory or folder. In such cases, we would write
$ .\prog1
The “.” followed by a backslash indicates that the file is in the current directory.
To run an executable on UNIX, we use the full file name, including the file
extension:
$ a.out
If we need to specify the file’s location, we’d use a “.” followed by a forward slash to
indicate that our executable is in the current directory:
$ ./a.out
The value returned from main is accessed in a system-dependent manner. On both
UNIX and Windows systems, after executing the program, you must issue an
appropriate echo command.
On UNIX systems, we obtain the status by writing
$ echo $?
To see the status on a Windows system, we write
$ echo %ERRORLEVEL%
/ : foward slash ( used in UNIX or LINUX)
\ : backward slash (used  in windows )

-std=c++0x to turn on C++ 11 support.

1.2:- Input output :-

standard library: Collection of types and functions that every C++ compiler must
support. The library provides the types that support IO. C++ programmers tend
to talk about “the library,” meaning the entire standard library. They also tend to
refer to particular parts of the library by referring to a library type, such as the
“iostream library,” meaning the part of the standard library that defines the IO
classes.
iostream:  Header that provides the library types for stream-oriented input and
output.
istream Library type providing stream-oriented input.
library type Type, such as istream, defined by the standard library.
ostream Library type providing stream-oriented output.
A stream is a sequence of characters read from or
written to an IO device. The term stream is intended(meant or planned)y to suggest that the characters
are generated, or consumed, sequentially over time.

library defines 4 IO objects. to handle input, we use object of type istream named cin ( see in ). This object is also referred to as
standard  input.Similarly, we use object cout( see out) from the ostream. this objecct is also referred to as standard output.

standard output/standard input:  Output/input stream usually associated with the window in which the
program executes.
The library also defines
two other ostream objects, named cerr and clog (pronounced see-err and see-log,
respectively). We typically use cerr, referred to as the standard error, for warning
and error messages and clog for general information about the execution of the
program.
standard error Output stream used for error reporting. Ordinarily, the standard
output and the standard error are tied to the window in which the program is
executed.
Ordinarily, the system associates each of these objects with the window in which
the program is executed. So, when we read from cin, data are read from the window
in which the program is executing, and when we write to cout, cerr, or clog, the
output is written to the same window.

First line of program :-
#include <iostream>
tells the compiler that we want to use the iostream library. The name inside angle
brackets (iostream in this case) refers to a header. Every program that uses a
library facility must include its associated header. The #include directive must be
written on a single line—the name of the header and the #include must appear on
the same line. In general, #include directives must appear outside any function.
Typically, we put all the #include directives for a program at the beginning of the
source file.
header : header Mechanism whereby the definitions of a class or other names are made
available to multiple programs. A program uses a header through a #include
directive.
Writing to a Stream
" << "  : The << operator takes two operands: The left-hand operand must be an ostream
object; the right-hand operand is a value to print.

namespace Mechanism for putting names defined by a library into a single
place. Namespaces help avoid inadvertent name clashes. The names defined by
the C++ library are in the namespace std.

:: operator Scope operator. Among other uses, the scope operator is used to
access names in a namespace. For example, std::cout denotes the name cout
from the namespace std.
These names use the scope operator (::) (§ 1.2, p. 8), which says that
the compiler should look in the scope of the left-hand operand for the name of the
right-hand operand. Thus, std::cin says that we want to use the name cin from
the namespace std.

A block is a sequence of zero or more statements enclosed by curly braces. A block is
a statement and may be used wherever a statement is required.
+= operator Compound assignment operator that adds the right-hand operand to
the left and stores the result in the left-hand operand; a += b is equivalent to a
= a + b.

That expression reads the next number from the standard input and stores that
number in value. The input operator (§ 1.2, p. 8) returns its left operand, which in
this case is std::cin. This condition, therefore, tests std::cin.
When we use an istream as a condition, the effect is to test the state of the
stream. If the stream is valid—that is, if the stream hasn’t encountered an error—then
the test succeeds. An istream becomes invalid when we hit end-of-file or encounter
an invalid input, such as reading a value that is not an integer. An istream that is in
an invalid state will cause the condition to yield false.

Entering an End-of-File from the Keyboard
When we enter input to a program from the keyboard, different operating
systems use different conventions to allow us to indicate end-of-file. On
Windows systems we enter an end-of-file by typing a control-z—hold down
the Ctrl key and press z—followed by hitting either the Enter or Return key.
On UNIX systems, including on Mac OS X machines, end-of-file is usually
control-d.

Syntax errors: when the programmer made some gramitical error in the C++ language.

Type errors: Each item of data in C++ has an associated type. The value 10,
for example, has a type of int (or, more colloquially, “is an int”). The word
"hello", including the double quotation marks, is a string literal. One
example of a type error is passing a string literal to a function that expects
an int argument.

Declaration errors: Every name used in a C++ program must be declared
before it is used. Failure to declare a name usually results in an error
message. The two most common declaration errors are forgetting to use
std:: for a name from the library and misspelling the name of an identifier:

data structure A logical grouping of data and operations on that data.

class Facility for defining our own data structures together with associated
operations. The class is one of the most fundamental features in C++. Library
types, such as istream and ostream, are classes.     